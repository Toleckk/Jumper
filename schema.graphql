# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface Connection {
    edges: [Edge]!
    pageInfo: PageInfo!
}

interface Edge {
    cursor: String!
}

type Description {
    about: String
    birthday: Date
    from: String
}

type Like {
    id: String!
    post: Post!
}

type Mutation {
    confirmRegistration(user: UserCreatingInput!): Void
    confirmRestore(password: String!, token: String!): Void
    createLike(like: LikeInput!): Boolean
    createPost(post: PostInput!): Boolean
    createRegistration(registration: RegistrationInput!): Void
    createRestore(login: String!): String!
    createSession(credentials: SessionInput!): Void
    createSubscribe(subscribe: SubscribeInput): Boolean
    removeLike(like: LikeInput!): Boolean
    removePost(id: String!): Boolean
    removeSession: Void
    removeSubscribe(subscribe: SubscribeInput): Boolean
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean
    hasPreviousPage: Boolean
    startCursor: String
}

type Post {
    date: Date!
    id: String!
    likedByMe: Boolean!
    likes: [Like]
    likesCount: Int!
    text: String!
    user: User!
}

type PostConnection implements Connection {
    edges: [PostEdge]!
    pageInfo: PageInfo!
}

type PostEdge implements Edge {
    cursor: String!
    node: Post!
}

type Query {
    canRegister(data: RegistrationCheckInput): Boolean
    like(id: String!): Like
    likes(owner: String!): [Like]
    me: User
    post(id: String!): Post
    posts(owner: String!): [Post]
    postsConnection(after: String, before: String, first: Int, last: Int, owner: String!): PostConnection
    subscribe(id: String!): Subscribe
    subscribes(account: String!): [Subscribe]
    user(nickname: String!): User
    usersConnection(after: String, before: String, first: Int, last: Int): UserConnection
}

type Subscribe {
    account: User!
    id: String!
    subscriber: User!
}

type User {
    avatar: String
    description: Description!
    followsIntersection(page: PaginationInput): [User]!
    followsIntersectionCount: Int!
    isReadByMe: Boolean!
    nickname: String!
    posts(after: String, before: String, first: Int, last: Int): PostConnection
    postsCount: Int!
    private: Boolean!
    registration: Date!
    subscribersCount: Int!
    subscribesCount: Int!
}

type UserConnection implements Connection {
    edges: [UserEdge]!
    pageInfo: PageInfo!
}

type UserEdge implements Edge {
    cursor: String!
    node: User!
}

input LikeInput {
    post: String!
}

input PaginationInput {
    after: String
    before: String
    first: Int
    last: Int
}

input PostInput {
    text: String!
}

input RegistrationCheckInput {
    email: String
    nickname: String
}

input RegistrationInput {
    email: String!
    nickname: String!
}

input SessionInput {
    login: String!
    password: String!
}

input SubscribeInput {
    account: String!
}

input UserCreatingInput {
    password: String!
    token: String!
}


scalar Date

scalar Void